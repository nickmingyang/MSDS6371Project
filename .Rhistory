library(tidyverse)
library(ggplot2)
library(olsrr)
library(GGally)
library(caret)
#Load in Dataset
#Call original data amesHouse
amesHouse = read.csv("/Users/mingyang/Desktop/SMU/StatisticalFoundation_Fall2020/MSDS6371Project/train.csv",header = TRUE)
#observe data
head(amesHouse)
str(amesHouse)
#look at neighborhood
amesHouse$Neighborhood
#extract variables we're interested for Analysis 1
data1 = amesHouse %>% select(SalePrice,GrLivArea,Neighborhood)%>%
filter(Neighborhood=="NAmes"|Neighborhood=="Edwards"|Neighborhood=="BrkSide")
str(data1)
#383 observations selected after filtering neighborhood of "NAmes", "Edwards" and "BrkSide"
#Convert Neighborhood to factors
data1$Neighborhood = as.factor(data1$Neighborhood)
#Plot and observe the relationship between SalePrice and GrLivArea
data1 %>% ggplot(aes(x=GrLivArea,y=SalePrice))+
geom_point()+ggtitle("Sale Price vs. Square Foot of Living area")+
xlab("Square Foot of Living Area")+
ylab("Sale Price")
# convert certain columns we need into factor in order to use multi regression model
cols.to.factor = c("MSSubClass","MSZoning","Street","Alley","LotShape","LandContour","Utilities",
"LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType",
"HouseStyle","OverallQual","OverallCond","RoofStyle","RoofMatl","Exterior1st",
"Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation","BsmtQual",
"BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
"CentralAir","Electrical","KitchenQual","Functional","FireplaceQu","GarageType",
"GarageFinish","GarageQual","GarageCond","PavedDrive","PoolQC","Fence","MiscFeature",
"SaleType","SaleCondition")
amesHouse[cols.to.factor] = lapply(amesHouse[cols.to.factor],factor)
str(amesHouse)
#Now exploring relationships between continuous variables
amesHouse %>% select(SalePrice,LotFrontage,LotArea,YearBuilt,YearRemodAdd,MasVnrArea,BsmtFinSF1,BsmtFinSF2)%>%
ggpairs()
#Try Logrithmic on SalePrice
amesHouse$lSalePrice = log(amesHouse$SalePrice)
#explore relationship between log SalePrice
amesHouse %>% select(lSalePrice,LotFrontage,LotArea,YearBuilt,YearRemodAdd,MasVnrArea,BsmtFinSF1,BsmtFinSF2)%>%
ggpairs()
variables.used = amesHouse %>% select(lSalePrice,Id,LotFrontage,LotArea,YearBuilt,YearRemodAdd,MasVnrArea,BsmtFinSF1)
train.control <- trainControl(method = "cv", number = 10)
forward.model = train(lSalePrice~, data=variables.used,
method="leapForward",
trControl = train.control,
trace=FALSE)
forward.model = train(lSalePrice~.-Id, data=variables.used,
method="leapForward",
trControl = train.control,
trace=FALSE)
summary(amesHouse)
#LotFrontage has too many missing values, yet it only has 0.356 correlation with lSalePrice, so not using this variable
#Alley has
variables.used = amesHouse %>% select(lSalePrice,Id,LotArea,Street,Alley,YearBuilt,YearRemodAdd)
forward.model = train(lSalePrice~.-Id, data=variables.used,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
amesHouse %>% select(lSalePrice,BsmtUnfSF,TotalBsmtSF,X1stFlrSF,X2ndFlrSF,LowQualFinSF,GrLivArea) %>%
ggpairs()
#Move forward with next batch of exploration
amesHouse %>% select(lSalePrice,BsmtFullBath,BsmtHalfBath,FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,
TotRmsAbvGrd)%>%
ggpairs()
#The only variable seem to have good correlation with lSalePrice is FullBath,TotRmsAbvGrd.
#???If we should change BsmtFullBath,BsmtHalfBath,HalfBath,BedroomAbvGr,KitchenAbvGr to factors???
#Keep going
amesHouse %>% select(lSalePrice,Fireplaces,GarageYrBlt,GarageCars,GarageArea) %>% ggpairs()
#The above variables all seem to have a good linear correlation with lSalePrice
#Keep going
amesHouse %>% select(lSalePrice,WoodDeckSF,OpenPorchSF,EnclosedPorch,X3SsnPorch,ScreenPorch,PoolArea,MiscVal)%>%
ggpairs()
#LotFrontage has too many missing values, yet it only has 0.356 correlation with lSalePrice, so not using this variable
#Alley has too many missing values, so delete column Alley
#LowQualFinSF has close to no correlaion with lSalePrice, delete
#BsmtHalfBath has close to 0 correlation,delete
#FireplaceQu too much missing data, delete
#X3SsnPorch too little correlation, delete
amesHouse$PoolArea
# convert certain columns we need into factor in order to use multi regression model
cols.to.factor = c("MSSubClass","MSZoning","Street","Alley","LotShape","LandContour","Utilities",
"LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType",
"HouseStyle","OverallQual","OverallCond","RoofStyle","RoofMatl","Exterior1st",
"Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation","BsmtQual",
"BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
"CentralAir","Electrical","KitchenQual","Functional","FireplaceQu","GarageType",
"GarageFinish","GarageQual","GarageCond","PavedDrive","PoolQC","Fence","MiscFeature",
"SaleType","SaleCondition","PoolArea")
amesHouse[cols.to.factor] = lapply(amesHouse[cols.to.factor],factor)
#LotFrontage has too many missing values, yet it only has 0.356 correlation with lSalePrice, so not using this variable
#Alley has too many missing values, so delete column Alley
#LowQualFinSF has close to no correlaion with lSalePrice, delete
#BsmtHalfBath has close to 0 correlation,delete
#FireplaceQu too much missing data, delete
#X3SsnPorch too little correlation, delete
amesHouse$PoolArea
#linear relationships don't seem particularly strong except WoodDeckSF, OpenPorchSF
#Last but not least
amesHouse %>% select(lSalePrice,MoSold,YrSold)%>% ggpairs()
amesHouse$MiscFeature
amesHouse$MiscVal
variables.used = amesHouse %>%
select(MSSubClass,MSZoning,LotArea,Street,LotShape,LandContour,Utilities,
LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle,
OverallQual,OverallCond,YearBuilt,YearRemodAdd,RoofStyle,RoofMatl,Exterior1st,
Exterior2nd,MasVnrType,MasVnrArea,ExterQual,ExterCond,Foundation,BsmtQual,BsmtCond,
BsmtExposure,BsmtFinType1,BsmtFinSF1,BsmtFinType2,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF,
Heating,HeatingQC,CentralAir,Electrical,X1stFlrSF,X2ndFlrSF,GrLivArea,BsmtFullBath,
FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,KitchenQual,TotRmsAbvGrd,Functional,
Fireplaces,GarageType,GarageYrBlt,GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,
PavedDrive,WoodDeckSF,OpenPorchSF,EnclosedPorch,ScreenPorch,PoolArea,MoSold,YrSold,
SaleType,SaleCondition,lSalePrice)
str(variables.used)
# convert certain columns we need into factor in order to use multi regression model
cols.to.factor = c("MSSubClass","MSZoning","Street","Alley","LotShape","LandContour","Utilities",
"LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType",
"HouseStyle","OverallQual","OverallCond","RoofStyle","RoofMatl","Exterior1st",
"Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation","BsmtQual",
"BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
"CentralAir","Electrical","KitchenQual","Functional","FireplaceQu","GarageType",
"GarageFinish","GarageQual","GarageCond","PavedDrive","PoolQC","Fence","MiscFeature",
"SaleType","SaleCondition","PoolArea","MoSold","YrSold")
amesHouse[cols.to.factor] = lapply(amesHouse[cols.to.factor],factor)
variables.used = amesHouse %>%
select(MSSubClass,MSZoning,LotArea,Street,LotShape,LandContour,Utilities,
LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle,
OverallQual,OverallCond,YearBuilt,YearRemodAdd,RoofStyle,RoofMatl,Exterior1st,
Exterior2nd,MasVnrType,MasVnrArea,ExterQual,ExterCond,Foundation,BsmtQual,BsmtCond,
BsmtExposure,BsmtFinType1,BsmtFinSF1,BsmtFinType2,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF,
Heating,HeatingQC,CentralAir,Electrical,X1stFlrSF,X2ndFlrSF,GrLivArea,BsmtFullBath,
FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,KitchenQual,TotRmsAbvGrd,Functional,
Fireplaces,GarageType,GarageYrBlt,GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,
PavedDrive,WoodDeckSF,OpenPorchSF,EnclosedPorch,ScreenPorch,PoolArea,MoSold,YrSold,
SaleType,SaleCondition,lSalePrice)
str(variables.used)
summary(variables.used)
#Move forward with next batch of exploration
amesHouse %>% select(lSalePrice,BsmtFullBath,BsmtHalfBath,FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,
TotRmsAbvGrd)%>%
ggpairs()
#The only variable seem to have good correlation with lSalePrice is FullBath,TotRmsAbvGrd.
#???If we should change BsmtFullBath,BsmtHalfBath,HalfBath,BedroomAbvGr,KitchenAbvGr to factors???
#Keep going
amesHouse %>% select(lSalePrice,Fireplaces,GarageYrBlt,GarageCars,GarageArea) %>% ggpairs()
variables.used %>% drop_na()
temp = variables.used %>% drop_na()
str(temp)
str(amesHouse)
train.control <- trainControl(method = "cv", number = 10)
forward.model = train(lSalePrice~.-Id, data=temp,
method="leapForward",
trControl = train.control,
trace=FALSE)
variables.used = amesHouse %>%
select(Id,MSSubClass,MSZoning,LotArea,Street,LotShape,LandContour,Utilities,
LotConfig,LandSlope,Neighborhood,Condition1,Condition2,BldgType,HouseStyle,
OverallQual,OverallCond,YearBuilt,YearRemodAdd,RoofStyle,RoofMatl,Exterior1st,
Exterior2nd,MasVnrType,MasVnrArea,ExterQual,ExterCond,Foundation,BsmtQual,BsmtCond,
BsmtExposure,BsmtFinType1,BsmtFinSF1,BsmtFinType2,BsmtFinSF2,BsmtUnfSF,TotalBsmtSF,
Heating,HeatingQC,CentralAir,Electrical,X1stFlrSF,X2ndFlrSF,GrLivArea,BsmtFullBath,
FullBath,HalfBath,BedroomAbvGr,KitchenAbvGr,KitchenQual,TotRmsAbvGrd,Functional,
Fireplaces,GarageType,GarageYrBlt,GarageFinish,GarageCars,GarageArea,GarageQual,GarageCond,
PavedDrive,WoodDeckSF,OpenPorchSF,EnclosedPorch,ScreenPorch,PoolArea,MoSold,YrSold,
SaleType,SaleCondition,lSalePrice)
str(variables.used)
summary(variables.used)
temp = variables.used %>% drop_na()
train.control <- trainControl(method = "cv", number = 10)
forward.model = train(lSalePrice~.-Id, data=temp,
method="leapForward",
trControl = train.control,
trace=FALSE)
forward.model = train(lSalePrice~.-Id, data=temp,
method="leapForward",
trControl = train.control,
trace=FALSE)
forward.model$results
forward.model = train(lSalePrice~.-Id, data=temp,
method="lmStepAIC",
trControl = train.control,
trace=FALSE)
library(leaps)
library(tidyverse)
library(ggplot2)
library(olsrr)
library(GGally)
library(caret)
library(MASS)
library(leaps)
#Load in Dataset
#Call original data amesHouse
amesHouse = read.csv("/Users/mingyang/Desktop/SMU/StatisticalFoundation_Fall2020/MSDS6371Project/train.csv",header = TRUE)
# convert certain columns we need into factor in order to use multi regression model
cols.to.factor = c("MSSubClass","MSZoning","Street","Alley","LotShape","LandContour","Utilities",
"LotConfig","LandSlope","Neighborhood","Condition1","Condition2","BldgType",
"HouseStyle","OverallQual","OverallCond","RoofStyle","RoofMatl","Exterior1st",
"Exterior2nd","MasVnrType","ExterQual","ExterCond","Foundation","BsmtQual",
"BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2","Heating","HeatingQC",
"CentralAir","Electrical","KitchenQual","Functional","FireplaceQu","GarageType",
"GarageFinish","GarageQual","GarageCond","PavedDrive","PoolQC","Fence","MiscFeature",
"SaleType","SaleCondition","PoolArea","MoSold","YrSold","Fireplaces","FullBath")
amesHouse[cols.to.factor] = lapply(amesHouse[cols.to.factor],factor)
#Try Logrithmic on SalePrice
amesHouse$lSalePrice = log(amesHouse$SalePrice)
amesHouse$PoolYN = ifelse(is.na(amesHouse$PoolQC),"NO","YES")
amesHouse$PoolYN = as.factor(amesHouse$PoolYN)
variables.used = amesHouse %>%
dplyr::select(Id,MSSubClass,MSZoning,LotArea,LotConfig,Neighborhood,HouseStyle,
OverallQual,OverallCond,YearBuilt,YearRemodAdd,MasVnrArea,ExterQual,
ExterCond,Foundation,BsmtQual,BsmtCond,TotalBsmtSF,
Heating,CentralAir,X1stFlrSF,GrLivArea,FullBath,KitchenQual,TotRmsAbvGrd,
Fireplaces,GarageType,GarageCars,PoolYN,MoSold,YrSold,lSalePrice)
str(variables.used)
summary(variables.used)
#Adjusting MasVnrArea
variables.used$MasVnrArea = ifelse(is.na(variables.used$MasVnrArea),0,variables.used$MasVnrArea)
variables.used$BsmtQual = as.character(variables.used$BsmtQual)
variables.used$BsmtQual = ifelse(is.na(variables.used$BsmtQual),"NONE",variables.used$BsmtQual)
variables.used$BsmtQual = as.factor(variables.used$BsmtQual)
#Adjusting BsmtCond
variables.used$BsmtCond = as.character(variables.used$BsmtCond)
variables.used$BsmtCond = ifelse(is.na(variables.used$BsmtCond),"NONE",variables.used$BsmtCond)
variables.used$BsmtCond = as.factor(variables.used$BsmtCond)
#Adjusting GarageType
variables.used$GarageType = as.character(variables.used$GarageType)
variables.used$GarageType = ifelse(is.na(variables.used$GarageType),"NONE",variables.used$GarageType)
variables.used$GarageType = as.factor(variables.used$GarageType)
#Load in test.csv
testData = read.csv("/Users/mingyang/Desktop/SMU/StatisticalFoundation_Fall2020/MSDS6371Project/test.csv",header = TRUE)
#Convert variables we need from N/A to NONE
testData$MasVnrArea = ifelse(is.na(testData$MasVnrArea),0,testData$MasVnrArea)
testData$TotalBsmtSF = ifelse(is.na(testData$TotalBsmtSF),0,testData$TotalBsmtSF)
testData$GarageCars = ifelse(is.na(testData$GarageCars),0,testData$GarageCars)
testData$MSZoning = ifelse(is.na(testData$MSZoning),"RL",testData$MSZoning)
testData$KitchenQual = ifelse(is.na(testData$KitchenQual),"TA",testData$KitchenQual)
testData$MSSubClass = ifelse(testData$MSSubClass==150,180,testData$MSSubClass)
testData$FullBath = ifelse(testData$FullBath==4,3,testData$FullBath)
testData$Fireplaces = ifelse(testData$Fireplaces==4,3,testData$Fireplaces)
testData$BsmtQual = ifelse(is.na(testData$BsmtQual),"NONE",testData$BsmtQual)
testData$BsmtCond = ifelse(is.na(testData$BsmtCond),"NONE",testData$BsmtCond)
testData$GarageType = ifelse(is.na(testData$GarageType),"NONE",testData$GarageType)
#Convert some variables we need into factor
testData[cols.to.factor] = lapply(testData[cols.to.factor],factor)
#create variable PoolYN
testData$PoolYN = ifelse(is.na(testData$PoolQC),"NO","YES")
testData$PoolYN = as.factor(testData$PoolYN)
#select variables needed for testing
testVariable = testData %>%
dplyr::select(Id,MSSubClass,MSZoning,LotArea,LotConfig,Neighborhood,HouseStyle,
OverallQual,OverallCond,YearBuilt,YearRemodAdd,MasVnrArea,ExterQual,
ExterCond,Foundation,BsmtQual,BsmtCond,TotalBsmtSF,
Heating,CentralAir,X1stFlrSF,GrLivArea,FullBath,KitchenQual,TotRmsAbvGrd,
Fireplaces,GarageType,GarageCars,PoolYN,MoSold,YrSold)
?ols_step_backward_aic
set.seed(14)
#create forward fit model
#write a program to pretict 100 different combination to test forward selection model
iterations = 10
splitPerc = 0.8
total_RMSE = 0
for(i in 1:iterations){
trainIndices = sample(1:dim(variables.used)[1],round(splitPerc * dim(variables.used)[1]))
train = variables.used[trainIndices,]
test = variables.used[-trainIndices,]
backward_fit = lm(lSalePrice~.-Id,data=train)
backward.model = ols_step_backward_aic(backward_fit)
prediction = predict(backward.model$model,test)
squared_MSPE = mean((test$lSalePrice - prediction)^2)
temp_RMSE = sqrt(squared_MSPE)
total_RMSE = total_RMSE+temp_RMSE
}
#CV Press
exp(total_RMSE/iterations)
set.seed(15)
#create forward fit model
#write a program to pretict 100 different combination to test forward selection model
iterations = 100
splitPerc = 0.8
total_RMSE = 0
for(i in 1:iterations){
trainIndices = sample(1:dim(variables.used)[1],round(splitPerc * dim(variables.used)[1]))
train = variables.used[trainIndices,]
test = variables.used[-trainIndices,]
backward_fit = lm(lSalePrice~.-Id,data=train)
backward.model = ols_step_backward_aic(backward_fit)
prediction = predict(backward.model$model,test)
squared_MSPE = mean((test$lSalePrice - prediction)^2)
temp_RMSE = sqrt(squared_MSPE)
total_RMSE = total_RMSE+temp_RMSE
}
#CV Press
exp(total_RMSE/iterations)
set.seed(12)
#create forward fit model
#write a program to pretict 100 different combination to test forward selection model
iterations = 100
splitPerc = 0.8
total_RMSE = 0
for(i in 1:iterations){
trainIndices = sample(1:dim(variables.used)[1],round(splitPerc * dim(variables.used)[1]))
train = variables.used[trainIndices,]
test = variables.used[-trainIndices,]
forward_fit = lm(lSalePrice~.-Id,data=train)
forward.model = ols_step_forward_aic(forward_fit,penter=0.15)
prediction = predict(forward.model$model,test)
squared_MSPE = mean((test$lSalePrice - prediction)^2)
temp_RMSE = sqrt(squared_MSPE)
total_RMSE = total_RMSE+temp_RMSE
}
#CV Press
exp(total_RMSE/iterations)
backward_fit = lm(lSalePrice~.-Id,data=variables.used)
backward.model = ols_step_backward_aic(backward_fit)
backward.model$model
backward.model
backward.model$model
backward.model$steps
ols_plot_resid_stand(backward.model$model)
ols_plot_cooksd_bar(backward.model$model)
plot(backward.model$model)
testVariable$lSalePriceBackward = predict(backward.model$model,testVariable)
testVariable$SalePrice = exp(testVariable$lSalePriceBackward)
result.backward = testVariable %>% dplyr::select(Id,SalePrice)
write.csv(result.backward,"Backward_Prediction_Miller_YU.csv",row.names = FALSE)
backward.model
backward.model$steps
backward.model$rsq
backward.model$aics
backward.model$model
set.seed(16)
#create forward fit model
#write a program to pretict 100 different combination to test forward selection model
iterations = 100
splitPerc = 0.8
total_RMSE = 0
for(i in 1:iterations){
trainIndices = sample(1:dim(variables.used)[1],round(splitPerc * dim(variables.used)[1]))
train = variables.used[trainIndices,]
test = variables.used[-trainIndices,]
backward_fit = lm(lSalePrice~.-Id,data=train)
backward.model = ols_step_backward_p(backward_fit,prem=0.1,details=FALSE)
prediction = predict(backward.model$model,test)
squared_MSPE = mean((test$lSalePrice - prediction)^2)
temp_RMSE = sqrt(squared_MSPE)
total_RMSE = total_RMSE+temp_RMSE
}
#CV Press = 1
exp(total_RMSE/iterations)
#Build model with full dataset for fitting
backward_fit = lm(lSalePrice~.-Id,data=variables.used)
backward.model = ols_step_backward_p(backward_fit,prem=0.1,details=FALSE)
backward.model$model
backward.model
testVariable$lSalePriceBackward = predict(backward.model$model,testVariable)
testVariable$SalePrice = exp(testVariable$lSalePriceBackward)
result.backward = testVariable %>% dplyr::select(Id,SalePrice)
write.csv(result.backward,"Backward_Prediction_usingP_Miller_YU.csv",row.names = FALSE)
